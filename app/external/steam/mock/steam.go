// Code generated by MockGen. DO NOT EDIT.
// Source: ./steam.go
//
// Generated by this command:
//
//	mockgen -source=./steam.go -destination=../external/steam/mock/steam.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	service "github.com/TsubasaBneAus/steam_game_price_notifier/app/service"
	gomock "go.uber.org/mock/gomock"
)

// MockSteamWishlistGetter is a mock of SteamWishlistGetter interface.
type MockSteamWishlistGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSteamWishlistGetterMockRecorder
	isgomock struct{}
}

// MockSteamWishlistGetterMockRecorder is the mock recorder for MockSteamWishlistGetter.
type MockSteamWishlistGetterMockRecorder struct {
	mock *MockSteamWishlistGetter
}

// NewMockSteamWishlistGetter creates a new mock instance.
func NewMockSteamWishlistGetter(ctrl *gomock.Controller) *MockSteamWishlistGetter {
	mock := &MockSteamWishlistGetter{ctrl: ctrl}
	mock.recorder = &MockSteamWishlistGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSteamWishlistGetter) EXPECT() *MockSteamWishlistGetterMockRecorder {
	return m.recorder
}

// GetSteamWishlist mocks base method.
func (m *MockSteamWishlistGetter) GetSteamWishlist(ctx context.Context, input *service.GetSteamWishlistInput) (*service.GetSteamWishlistOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSteamWishlist", ctx, input)
	ret0, _ := ret[0].(*service.GetSteamWishlistOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSteamWishlist indicates an expected call of GetSteamWishlist.
func (mr *MockSteamWishlistGetterMockRecorder) GetSteamWishlist(ctx, input any) *MockSteamWishlistGetterGetSteamWishlistCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSteamWishlist", reflect.TypeOf((*MockSteamWishlistGetter)(nil).GetSteamWishlist), ctx, input)
	return &MockSteamWishlistGetterGetSteamWishlistCall{Call: call}
}

// MockSteamWishlistGetterGetSteamWishlistCall wrap *gomock.Call
type MockSteamWishlistGetterGetSteamWishlistCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSteamWishlistGetterGetSteamWishlistCall) Return(arg0 *service.GetSteamWishlistOutput, arg1 error) *MockSteamWishlistGetterGetSteamWishlistCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSteamWishlistGetterGetSteamWishlistCall) Do(f func(context.Context, *service.GetSteamWishlistInput) (*service.GetSteamWishlistOutput, error)) *MockSteamWishlistGetterGetSteamWishlistCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSteamWishlistGetterGetSteamWishlistCall) DoAndReturn(f func(context.Context, *service.GetSteamWishlistInput) (*service.GetSteamWishlistOutput, error)) *MockSteamWishlistGetterGetSteamWishlistCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
