// Code generated by MockGen. DO NOT EDIT.
// Source: ./discord.go
//
// Generated by this command:
//
//	mockgen -source=./discord.go -destination=../external/discord/mock/discord.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	service "github.com/TsubasaBneAus/steam_game_price_notifier/app/service"
	gomock "go.uber.org/mock/gomock"
)

// MockVideoGamePricesOnDiscordNotifier is a mock of VideoGamePricesOnDiscordNotifier interface.
type MockVideoGamePricesOnDiscordNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockVideoGamePricesOnDiscordNotifierMockRecorder
	isgomock struct{}
}

// MockVideoGamePricesOnDiscordNotifierMockRecorder is the mock recorder for MockVideoGamePricesOnDiscordNotifier.
type MockVideoGamePricesOnDiscordNotifierMockRecorder struct {
	mock *MockVideoGamePricesOnDiscordNotifier
}

// NewMockVideoGamePricesOnDiscordNotifier creates a new mock instance.
func NewMockVideoGamePricesOnDiscordNotifier(ctrl *gomock.Controller) *MockVideoGamePricesOnDiscordNotifier {
	mock := &MockVideoGamePricesOnDiscordNotifier{ctrl: ctrl}
	mock.recorder = &MockVideoGamePricesOnDiscordNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoGamePricesOnDiscordNotifier) EXPECT() *MockVideoGamePricesOnDiscordNotifierMockRecorder {
	return m.recorder
}

// NotifyVideoGamePricesOnDiscord mocks base method.
func (m *MockVideoGamePricesOnDiscordNotifier) NotifyVideoGamePricesOnDiscord(ctx context.Context, input *service.NotifyVideoGamePricesOnDiscordInput) (*service.NotifyVideoGamePricesOnDiscordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyVideoGamePricesOnDiscord", ctx, input)
	ret0, _ := ret[0].(*service.NotifyVideoGamePricesOnDiscordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyVideoGamePricesOnDiscord indicates an expected call of NotifyVideoGamePricesOnDiscord.
func (mr *MockVideoGamePricesOnDiscordNotifierMockRecorder) NotifyVideoGamePricesOnDiscord(ctx, input any) *MockVideoGamePricesOnDiscordNotifierNotifyVideoGamePricesOnDiscordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyVideoGamePricesOnDiscord", reflect.TypeOf((*MockVideoGamePricesOnDiscordNotifier)(nil).NotifyVideoGamePricesOnDiscord), ctx, input)
	return &MockVideoGamePricesOnDiscordNotifierNotifyVideoGamePricesOnDiscordCall{Call: call}
}

// MockVideoGamePricesOnDiscordNotifierNotifyVideoGamePricesOnDiscordCall wrap *gomock.Call
type MockVideoGamePricesOnDiscordNotifierNotifyVideoGamePricesOnDiscordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVideoGamePricesOnDiscordNotifierNotifyVideoGamePricesOnDiscordCall) Return(arg0 *service.NotifyVideoGamePricesOnDiscordOutput, arg1 error) *MockVideoGamePricesOnDiscordNotifierNotifyVideoGamePricesOnDiscordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVideoGamePricesOnDiscordNotifierNotifyVideoGamePricesOnDiscordCall) Do(f func(context.Context, *service.NotifyVideoGamePricesOnDiscordInput) (*service.NotifyVideoGamePricesOnDiscordOutput, error)) *MockVideoGamePricesOnDiscordNotifierNotifyVideoGamePricesOnDiscordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVideoGamePricesOnDiscordNotifierNotifyVideoGamePricesOnDiscordCall) DoAndReturn(f func(context.Context, *service.NotifyVideoGamePricesOnDiscordInput) (*service.NotifyVideoGamePricesOnDiscordOutput, error)) *MockVideoGamePricesOnDiscordNotifierNotifyVideoGamePricesOnDiscordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockErrorOnDiscordNotifier is a mock of ErrorOnDiscordNotifier interface.
type MockErrorOnDiscordNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockErrorOnDiscordNotifierMockRecorder
	isgomock struct{}
}

// MockErrorOnDiscordNotifierMockRecorder is the mock recorder for MockErrorOnDiscordNotifier.
type MockErrorOnDiscordNotifierMockRecorder struct {
	mock *MockErrorOnDiscordNotifier
}

// NewMockErrorOnDiscordNotifier creates a new mock instance.
func NewMockErrorOnDiscordNotifier(ctrl *gomock.Controller) *MockErrorOnDiscordNotifier {
	mock := &MockErrorOnDiscordNotifier{ctrl: ctrl}
	mock.recorder = &MockErrorOnDiscordNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorOnDiscordNotifier) EXPECT() *MockErrorOnDiscordNotifierMockRecorder {
	return m.recorder
}

// NotifyErrorOnDiscord mocks base method.
func (m *MockErrorOnDiscordNotifier) NotifyErrorOnDiscord(ctx context.Context, input *service.NotifyErrorOnDiscordInput) (*service.NotifyErrorOnDiscordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyErrorOnDiscord", ctx, input)
	ret0, _ := ret[0].(*service.NotifyErrorOnDiscordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyErrorOnDiscord indicates an expected call of NotifyErrorOnDiscord.
func (mr *MockErrorOnDiscordNotifierMockRecorder) NotifyErrorOnDiscord(ctx, input any) *MockErrorOnDiscordNotifierNotifyErrorOnDiscordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyErrorOnDiscord", reflect.TypeOf((*MockErrorOnDiscordNotifier)(nil).NotifyErrorOnDiscord), ctx, input)
	return &MockErrorOnDiscordNotifierNotifyErrorOnDiscordCall{Call: call}
}

// MockErrorOnDiscordNotifierNotifyErrorOnDiscordCall wrap *gomock.Call
type MockErrorOnDiscordNotifierNotifyErrorOnDiscordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockErrorOnDiscordNotifierNotifyErrorOnDiscordCall) Return(arg0 *service.NotifyErrorOnDiscordOutput, arg1 error) *MockErrorOnDiscordNotifierNotifyErrorOnDiscordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockErrorOnDiscordNotifierNotifyErrorOnDiscordCall) Do(f func(context.Context, *service.NotifyErrorOnDiscordInput) (*service.NotifyErrorOnDiscordOutput, error)) *MockErrorOnDiscordNotifierNotifyErrorOnDiscordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockErrorOnDiscordNotifierNotifyErrorOnDiscordCall) DoAndReturn(f func(context.Context, *service.NotifyErrorOnDiscordInput) (*service.NotifyErrorOnDiscordOutput, error)) *MockErrorOnDiscordNotifierNotifyErrorOnDiscordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
