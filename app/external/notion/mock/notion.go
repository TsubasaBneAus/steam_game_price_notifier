// Code generated by MockGen. DO NOT EDIT.
// Source: ./notion.go
//
// Generated by this command:
//
//	mockgen -source=./notion.go -destination=../external/notion/mock/notion.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	service "github.com/TsubasaBneAus/steam_game_price_notifier/app/service"
	gomock "go.uber.org/mock/gomock"
)

// MockNotionWishlistGetter is a mock of NotionWishlistGetter interface.
type MockNotionWishlistGetter struct {
	ctrl     *gomock.Controller
	recorder *MockNotionWishlistGetterMockRecorder
	isgomock struct{}
}

// MockNotionWishlistGetterMockRecorder is the mock recorder for MockNotionWishlistGetter.
type MockNotionWishlistGetterMockRecorder struct {
	mock *MockNotionWishlistGetter
}

// NewMockNotionWishlistGetter creates a new mock instance.
func NewMockNotionWishlistGetter(ctrl *gomock.Controller) *MockNotionWishlistGetter {
	mock := &MockNotionWishlistGetter{ctrl: ctrl}
	mock.recorder = &MockNotionWishlistGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotionWishlistGetter) EXPECT() *MockNotionWishlistGetterMockRecorder {
	return m.recorder
}

// GetNotionWishlist mocks base method.
func (m *MockNotionWishlistGetter) GetNotionWishlist(ctx context.Context, input *service.GetNotionWishlistInput) (*service.GetNotionWishlistOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotionWishlist", ctx, input)
	ret0, _ := ret[0].(*service.GetNotionWishlistOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotionWishlist indicates an expected call of GetNotionWishlist.
func (mr *MockNotionWishlistGetterMockRecorder) GetNotionWishlist(ctx, input any) *MockNotionWishlistGetterGetNotionWishlistCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotionWishlist", reflect.TypeOf((*MockNotionWishlistGetter)(nil).GetNotionWishlist), ctx, input)
	return &MockNotionWishlistGetterGetNotionWishlistCall{Call: call}
}

// MockNotionWishlistGetterGetNotionWishlistCall wrap *gomock.Call
type MockNotionWishlistGetterGetNotionWishlistCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotionWishlistGetterGetNotionWishlistCall) Return(arg0 *service.GetNotionWishlistOutput, arg1 error) *MockNotionWishlistGetterGetNotionWishlistCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotionWishlistGetterGetNotionWishlistCall) Do(f func(context.Context, *service.GetNotionWishlistInput) (*service.GetNotionWishlistOutput, error)) *MockNotionWishlistGetterGetNotionWishlistCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotionWishlistGetterGetNotionWishlistCall) DoAndReturn(f func(context.Context, *service.GetNotionWishlistInput) (*service.GetNotionWishlistOutput, error)) *MockNotionWishlistGetterGetNotionWishlistCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNotionWishlistItemCreator is a mock of NotionWishlistItemCreator interface.
type MockNotionWishlistItemCreator struct {
	ctrl     *gomock.Controller
	recorder *MockNotionWishlistItemCreatorMockRecorder
	isgomock struct{}
}

// MockNotionWishlistItemCreatorMockRecorder is the mock recorder for MockNotionWishlistItemCreator.
type MockNotionWishlistItemCreatorMockRecorder struct {
	mock *MockNotionWishlistItemCreator
}

// NewMockNotionWishlistItemCreator creates a new mock instance.
func NewMockNotionWishlistItemCreator(ctrl *gomock.Controller) *MockNotionWishlistItemCreator {
	mock := &MockNotionWishlistItemCreator{ctrl: ctrl}
	mock.recorder = &MockNotionWishlistItemCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotionWishlistItemCreator) EXPECT() *MockNotionWishlistItemCreatorMockRecorder {
	return m.recorder
}

// CreateNotionWishlistItem mocks base method.
func (m *MockNotionWishlistItemCreator) CreateNotionWishlistItem(ctx context.Context, input *service.CreateNotionWishlistItemInput) (*service.CreateNotionWishlistItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotionWishlistItem", ctx, input)
	ret0, _ := ret[0].(*service.CreateNotionWishlistItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotionWishlistItem indicates an expected call of CreateNotionWishlistItem.
func (mr *MockNotionWishlistItemCreatorMockRecorder) CreateNotionWishlistItem(ctx, input any) *MockNotionWishlistItemCreatorCreateNotionWishlistItemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotionWishlistItem", reflect.TypeOf((*MockNotionWishlistItemCreator)(nil).CreateNotionWishlistItem), ctx, input)
	return &MockNotionWishlistItemCreatorCreateNotionWishlistItemCall{Call: call}
}

// MockNotionWishlistItemCreatorCreateNotionWishlistItemCall wrap *gomock.Call
type MockNotionWishlistItemCreatorCreateNotionWishlistItemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotionWishlistItemCreatorCreateNotionWishlistItemCall) Return(arg0 *service.CreateNotionWishlistItemOutput, arg1 error) *MockNotionWishlistItemCreatorCreateNotionWishlistItemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotionWishlistItemCreatorCreateNotionWishlistItemCall) Do(f func(context.Context, *service.CreateNotionWishlistItemInput) (*service.CreateNotionWishlistItemOutput, error)) *MockNotionWishlistItemCreatorCreateNotionWishlistItemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotionWishlistItemCreatorCreateNotionWishlistItemCall) DoAndReturn(f func(context.Context, *service.CreateNotionWishlistItemInput) (*service.CreateNotionWishlistItemOutput, error)) *MockNotionWishlistItemCreatorCreateNotionWishlistItemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNotionWishlistItemUpdater is a mock of NotionWishlistItemUpdater interface.
type MockNotionWishlistItemUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockNotionWishlistItemUpdaterMockRecorder
	isgomock struct{}
}

// MockNotionWishlistItemUpdaterMockRecorder is the mock recorder for MockNotionWishlistItemUpdater.
type MockNotionWishlistItemUpdaterMockRecorder struct {
	mock *MockNotionWishlistItemUpdater
}

// NewMockNotionWishlistItemUpdater creates a new mock instance.
func NewMockNotionWishlistItemUpdater(ctrl *gomock.Controller) *MockNotionWishlistItemUpdater {
	mock := &MockNotionWishlistItemUpdater{ctrl: ctrl}
	mock.recorder = &MockNotionWishlistItemUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotionWishlistItemUpdater) EXPECT() *MockNotionWishlistItemUpdaterMockRecorder {
	return m.recorder
}

// UpdateNotionWishlistItem mocks base method.
func (m *MockNotionWishlistItemUpdater) UpdateNotionWishlistItem(ctx context.Context, input *service.UpdateNotionWishlistItemInput) (*service.UpdateNotionWishlistItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotionWishlistItem", ctx, input)
	ret0, _ := ret[0].(*service.UpdateNotionWishlistItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotionWishlistItem indicates an expected call of UpdateNotionWishlistItem.
func (mr *MockNotionWishlistItemUpdaterMockRecorder) UpdateNotionWishlistItem(ctx, input any) *MockNotionWishlistItemUpdaterUpdateNotionWishlistItemCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotionWishlistItem", reflect.TypeOf((*MockNotionWishlistItemUpdater)(nil).UpdateNotionWishlistItem), ctx, input)
	return &MockNotionWishlistItemUpdaterUpdateNotionWishlistItemCall{Call: call}
}

// MockNotionWishlistItemUpdaterUpdateNotionWishlistItemCall wrap *gomock.Call
type MockNotionWishlistItemUpdaterUpdateNotionWishlistItemCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotionWishlistItemUpdaterUpdateNotionWishlistItemCall) Return(arg0 *service.UpdateNotionWishlistItemOutput, arg1 error) *MockNotionWishlistItemUpdaterUpdateNotionWishlistItemCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotionWishlistItemUpdaterUpdateNotionWishlistItemCall) Do(f func(context.Context, *service.UpdateNotionWishlistItemInput) (*service.UpdateNotionWishlistItemOutput, error)) *MockNotionWishlistItemUpdaterUpdateNotionWishlistItemCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotionWishlistItemUpdaterUpdateNotionWishlistItemCall) DoAndReturn(f func(context.Context, *service.UpdateNotionWishlistItemInput) (*service.UpdateNotionWishlistItemOutput, error)) *MockNotionWishlistItemUpdaterUpdateNotionWishlistItemCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
