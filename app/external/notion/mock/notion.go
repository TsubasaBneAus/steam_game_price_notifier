// Code generated by MockGen. DO NOT EDIT.
// Source: ./notion.go
//
// Generated by this command:
//
//	mockgen -source=./notion.go -destination=../external/notion/mock/notion.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	service "github.com/TsubasaBneAus/steam_game_price_notifier/app/service"
	gomock "go.uber.org/mock/gomock"
)

// MockNotionWishlistGetter is a mock of NotionWishlistGetter interface.
type MockNotionWishlistGetter struct {
	ctrl     *gomock.Controller
	recorder *MockNotionWishlistGetterMockRecorder
	isgomock struct{}
}

// MockNotionWishlistGetterMockRecorder is the mock recorder for MockNotionWishlistGetter.
type MockNotionWishlistGetterMockRecorder struct {
	mock *MockNotionWishlistGetter
}

// NewMockNotionWishlistGetter creates a new mock instance.
func NewMockNotionWishlistGetter(ctrl *gomock.Controller) *MockNotionWishlistGetter {
	mock := &MockNotionWishlistGetter{ctrl: ctrl}
	mock.recorder = &MockNotionWishlistGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotionWishlistGetter) EXPECT() *MockNotionWishlistGetterMockRecorder {
	return m.recorder
}

// GetNotionWishlist mocks base method.
func (m *MockNotionWishlistGetter) GetNotionWishlist(ctx context.Context, input *service.GetNotionWishlistInput) (*service.GetNotionWishlistOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotionWishlist", ctx, input)
	ret0, _ := ret[0].(*service.GetNotionWishlistOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotionWishlist indicates an expected call of GetNotionWishlist.
func (mr *MockNotionWishlistGetterMockRecorder) GetNotionWishlist(ctx, input any) *MockNotionWishlistGetterGetNotionWishlistCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotionWishlist", reflect.TypeOf((*MockNotionWishlistGetter)(nil).GetNotionWishlist), ctx, input)
	return &MockNotionWishlistGetterGetNotionWishlistCall{Call: call}
}

// MockNotionWishlistGetterGetNotionWishlistCall wrap *gomock.Call
type MockNotionWishlistGetterGetNotionWishlistCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotionWishlistGetterGetNotionWishlistCall) Return(arg0 *service.GetNotionWishlistOutput, arg1 error) *MockNotionWishlistGetterGetNotionWishlistCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotionWishlistGetterGetNotionWishlistCall) Do(f func(context.Context, *service.GetNotionWishlistInput) (*service.GetNotionWishlistOutput, error)) *MockNotionWishlistGetterGetNotionWishlistCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotionWishlistGetterGetNotionWishlistCall) DoAndReturn(f func(context.Context, *service.GetNotionWishlistInput) (*service.GetNotionWishlistOutput, error)) *MockNotionWishlistGetterGetNotionWishlistCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNotionWishlistUpdater is a mock of NotionWishlistItemUpdater interface.
type MockNotionWishlistUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockNotionWishlistUpdaterMockRecorder
	isgomock struct{}
}

// MockNotionWishlistUpdaterMockRecorder is the mock recorder for MockNotionWishlistUpdater.
type MockNotionWishlistUpdaterMockRecorder struct {
	mock *MockNotionWishlistUpdater
}

// NewMockNotionWishlistUpdater creates a new mock instance.
func NewMockNotionWishlistUpdater(ctrl *gomock.Controller) *MockNotionWishlistUpdater {
	mock := &MockNotionWishlistUpdater{ctrl: ctrl}
	mock.recorder = &MockNotionWishlistUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotionWishlistUpdater) EXPECT() *MockNotionWishlistUpdaterMockRecorder {
	return m.recorder
}

// UpdateNotionWishlistItem mocks base method.
func (m *MockNotionWishlistUpdater) UpdateNotionWishlistItem(ctx context.Context, input *service.UpdateNotionWishlistItemInput) (*service.UpdateNotionWishlistItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotionWishlistItem", ctx, input)
	ret0, _ := ret[0].(*service.UpdateNotionWishlistItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotionWishlistItem indicates an expected call of UpdateNotionWishlistItem.
func (mr *MockNotionWishlistUpdaterMockRecorder) UpdateNotionWishlistItem(ctx, input any) *MockNotionWishlistUpdaterUpdateNotionWishlistCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotionWishlistItem", reflect.TypeOf((*MockNotionWishlistUpdater)(nil).UpdateNotionWishlistItem), ctx, input)
	return &MockNotionWishlistUpdaterUpdateNotionWishlistCall{Call: call}
}

// MockNotionWishlistUpdaterUpdateNotionWishlistCall wrap *gomock.Call
type MockNotionWishlistUpdaterUpdateNotionWishlistCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotionWishlistUpdaterUpdateNotionWishlistCall) Return(arg0 *service.UpdateNotionWishlistItemOutput, arg1 error) *MockNotionWishlistUpdaterUpdateNotionWishlistCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotionWishlistUpdaterUpdateNotionWishlistCall) Do(f func(context.Context, *service.UpdateNotionWishlistItemInput) (*service.UpdateNotionWishlistItemOutput, error)) *MockNotionWishlistUpdaterUpdateNotionWishlistCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotionWishlistUpdaterUpdateNotionWishlistCall) DoAndReturn(f func(context.Context, *service.UpdateNotionWishlistItemInput) (*service.UpdateNotionWishlistItemOutput, error)) *MockNotionWishlistUpdaterUpdateNotionWishlistCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
